= 聚集法

#table(
  columns: (auto, auto),
  inset: 10pt,
  align: horizon,
  [*第i次操作*], [total],
  "1", "0 + 1 = 1",
  "2", "1 + 2 = 3",
  "3", "3 + 1 = 4",
  "4", "4 + 4 = 8",
  "5", "8 + 1 = 9",
  "6", "9 + 1 = 10",
  "7", "10  + 1 = 11",
  "8", "11  + 8  = 19",
  "9", "19  + 1 = 20",
  "10", "20  + 1 = 21",
  "...", "...",
  "n", $sum_(i=1)^(log_(2)n)(2^i - 1) + n$
)

因此, 可以得到$"total" = 2n - log_(2)n - 1$,
即$T(n) = O(3n - log_(2)n - 1) = O(2n) = O(n)$,
那么单次操作$T(1) = T(n) / n = O(1)$

可以得到, 单次操作的平均是$O(1)$

= 会计法

设摊还代价是 $hat(c_i) = 3 ( 1 + 1 + 1 )$

其中1是当前操作的代价.

第i次操作,
给第 $i$ 个元素存款,
给第 $i - 2^(floor(log_(2)(i)))$ 个元素存款1

当 $i = 2 ^ (k) (k in bold(Z))$,
操作代价是i, 前面的数都已经存过1个代价了,
那么就将前面的存款取出来, 给第i次操作.

经验证, 存款的总和非负, 因此这个分析是正确的

因此, 单次操作的平均代价是$O(1)$


= 势能法

令势能函数$Phi(n) = 2 times n - 2 ^ (floor(log_(2)n) + 1)$, 当n = 0时, $Phi(0)= 0$

令$D_n = n$, $D_0 = 0$, $Phi(n) - Phi(0) = 2(n - 2 ^ (floor(log_(2)n))) >= 0$, 也就是: 总的摊还代价 - 总的真实代价 >= 0

因此, 可以确保这个势能函数是正确的(摊还代价是实际代价的上界)

那么第i次操作的摊还代价是: $hat(c_i) =  Phi(i) - Phi(i-1) = 2 - 2 * (2^(floor(log_(2)i)) - 2^(floor(log_(2)(i-1)))) = O(1)$

因此, 单次操作的平均代价是$O(1)$



